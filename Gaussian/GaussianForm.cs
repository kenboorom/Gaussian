// -------------------------------------------------------------------------------------------------
// Name of Program: Gaussian
//
// Author: Ken Boorom
//
// Release Date: June 29m 2017
//
// Instructions for obtaining the most current version of this program:
//      http://github.com/kenboorom/Gaussian
//
// Requirements for program:  Windows system capable of running Net 4.5
//
// Narrative: This program shows that a Gaussian (Normal) probability distribution can be 
// generated by successively adding functions with a uniform (flat) Probability Density Function (PDF).
//
// The Gaussian PDF is given by the formula f(x) = (1/sqrt(2*pi*sigma^2)) * exp(-x*x/(2*sigma))
//
// The Central Limit Theorem was originally posited by a French Mathmetician, Abraham de Moivre in a 
// 1733 paper.  It was later re-discovered by Laplace and published again in 1812.
//
// -------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Threading;

using System.Windows.Forms.DataVisualization.Charting;

namespace Gaussian
{
    public partial class FormGuassianDemo : Form
    {

        const int maxValue = 100;                               // Number of elements to include in the animated plot
        int remainingAnimatedFrames = 0;                        // Number of remaining animated frames
        const int numberIterationsPerFrame = 20;                // For each frame, number iterations to perform
        const int numberToAddPerIteration = 200;                // Number of new random numbers to add to PDF each frame
        const int numberRandomNumbersToAverage = 10;            // When adding numbers, # of random numbers to average

        ProbabilityDensityDistribution myPdf =                  // Class to store the PDF
              new ProbabilityDensityDistribution(maxValue);

        System.Windows.Forms.Timer myTimer = new System.Windows.Forms.Timer();          // Timer to perform animation

        public FormGuassianDemo()
        {
            InitializeComponent();
        }

        private void buttonPlot_Click(object sender, EventArgs e)
        {
            myTimer.Tick += new EventHandler(TimerEventProcessor);
            myTimer.Interval = 200;
            remainingAnimatedFrames = 100;
            myTimer.Start();
        }

        // Below will be fired off once per frame.  The The routine will repeat the fo
        private void TimerEventProcessor(Object myObject, EventArgs myEventArgs)
        {
            Random r = new Random();
            int[] numberList = new int[numberToAddPerIteration];
            remainingAnimatedFrames--;

            if (remainingAnimatedFrames <= 0)
            {
                myTimer.Stop();
                myTimer.Dispose();
                return;
            }

            for (int iteration = 0; iteration < numberIterationsPerFrame; iteration++)
            {
                // Add desired quantity of random numbers for each iteration
                for (int i = 0; i < numberToAddPerIteration; i++)
                {
                    int myTotal = 0;
                    for (int j = 0; j < numberRandomNumbersToAverage; j++)
                        myTotal += r.Next(maxValue);
                    numberList[i] = myTotal / numberRandomNumbersToAverage;
                }

                // Add the distribution we just created to the PDF
                myPdf.AddDistribution(numberList);

                // Re-plot the PDF
                this.gaussianChart.ChartAreas[0].AxisY.Maximum = myPdf.pdf.Max();
                this.gaussianChart.Series.Clear();
                Series s = this.gaussianChart.Series.Add("PDF");
                for (int i = 0; i < myPdf.pdf.Length; i++)
                    s.Points.AddXY(i, myPdf.pdf[i]);

                // Done!
            }
        }

    }


}
